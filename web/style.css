@import "palette.css";

@import url('https://fonts.googleapis.com/css2?family=Exo+2:ital@0;1&display=swap');

:root
      { --panel: var(--gb72);
        --input: var(--gb72);
      --outline: var(--gb60);
         --page: var(--gb84);
         --text: var(--gb12);
      --station: var(--gb-yellow00);
     --consumed: var(--gb-orange49);
     --produced: var(--gb-green49); }

/* :root */
/*   { --panel: var(--baro72); */
/*     --input: var(--baro72); */
/*   --outline: var(--baro60); */
/*      --page: var(--baro60); */
/*      --text: var(--baro00); */
/*  --consumed: var(--b-rd50); */
/*  --produced: var(--b-bl50); } */

body
  { font: medium/1.5 'Exo 2', 'IBM Plex Sans', sans-serif;
    background-color: var(--page);
    color:            var(--text);
    margin: 0 }

a, input, button, textarea, select
  { background:  transparent;
    color:       inherit;
    font:        inherit;
    text-align:  inherit;
    text-shadow: inherit }

button, textarea, input, select
  { background-color: var(--input);
    border:           1px solid var(--outline);
    border-radius:    4px; }

input, select
  { padding:    0.3ch 0.4ch;
    box-sizing: content-box; }

button          { cursor: pointer; }
button:disabled { cursor: not-allowed }

ul { margin: 0; padding: 0 }

p,
.process
  { max-width: 44ch;
    margin:    2ch 1ch }

.process span
  { padding:       0.3ch 0.4ch;
    overflow:      hidden;
    text-overflow: ellipsis;
    white-space:   nowrap }

.item { display: flex }

.item > *
  { flex: 0 0 min-content }
.item .amount,
.item .time
  { text-align: right; min-width: 5ch }
.item .station,
.item .what
  { flex: 1 1 max-content }

.random + .random-list
  { margin-left: 1ch }
.random .what
  { font-style: italic }

.item
  { background-color: var(--panel);
              border: 0 solid var(--outline);
        border-width: 0 1px 0 1px }
.item:first-of-type
  {    border-top-width: 1px }
.item:last-of-type
  { border-bottom-width: 1px }

/* stations (Deconstructor/Fabricator) row */
.item.stations
{ background-color: var(--station);
             color: var(--gb96);
       text-shadow: 1px   1px var(--gb24);
            border: 1px solid var(--gb48);
        box-shadow: inset  1px  1px var(--gb-yellow49),
                    inset -1px -1px var(--gb-yellow49) }
.item.stations + .item.stations { border-top: 0 }

/* stack decoration under amount text */
.item .decoration
    { box-sizing: border-box;
       min-width:  24px;
     margin-left:   8px;
    margin-right: -36px; }
.item .decoration + .amount
  { z-index: 1 }

.item .amount.amount-multiple::after
  { content: 'Ã—'; line-height: 0 }

/* stripe repeating */
.item .decoration
  { clip-path: polygon(0  0%, 100%   0, 100% 40%,  50%  60%, 0  40%,
                       0 70%,  50% 90%, 100% 70%, 100% 100%, 0 100%) }

/* stripe end */
.item.produced:last-of-type .decoration
  { clip-path: polygon(0  0%, 100%   0, 100% 40%,  50%  60%, 0  40%) }

/* stripe colors */
.item.consumed .decoration
  { background-color: var(--consumed) }
.item.produced .decoration
  { background-color: var(--produced) }

/* this feels really dirty; alternatively, generate a css file with a css class
 * per sprite that uses background-image */
/* .item .sprite */
/*   { position: relative; flex-basis: 48px } */
/* .item .sprite img */
/*   { position: absolute; margin: auto; */
/*     top: 0; right: 0; bottom: 0; left: 0; */
/*     max-height: 100%; max-width: 100% } */
.item .sprite
           { flex-basis: 48px;
    background-position: center;
        background-size: contain;
      background-repeat: no-repeat }
